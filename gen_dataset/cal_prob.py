import math
prob_list=[
    0,0.002158854,0.002158854,
    3257,0.002620718,0.004779572,
    3785,0.003045569,0.007825142,
    4423,0.003558931,0.011384072,
    5190,0.004176091,0.015560163,
    5792,0.004660485,0.020220649,
    6616,0.00532351,0.025544159,
    7194,0.005788593,0.031332752,
    8014,0.0064484,0.037781152,
    8630,0.006944059,0.044725211,
    9598,0.007722952,0.052448163,
    10410,0.008376321,0.060824484,
    11259,0.009059462,0.069883947,
    11920,0.00959133,0.079475277,
    12674,0.01019803,0.089673307,
    13525,0.010882781,0.100556088,
    14204,0.011429132,0.11198522,
    15182,0.012216072,0.124201292,
    15748,0.012671499,0.136872792,
    16440,0.013228311,0.150101103,
    17208,0.013846276,0.16394738,
    17715,0.01425423,0.178201609,
    18704,0.015050021,0.19325163,
    18913,0.015218191,0.208469821,
    19577,0.015752473,0.224222294,
    20125,0.016193417,0.24041571,
    20423,0.0164332,0.25684891,
    20998,0.016895869,0.273744779,
    21399,0.01721853,0.290963309,
    21473,0.017278074,0.308241383,
    22017,0.017715799,0.325957182,
    21951,0.017662693,0.343619874,
    22462,0.018073865,0.361693739,
    22467,0.018077888,0.379771627,
    22494,0.018099613,0.39787124,
    23012,0.018516418,0.416387657,
    22973,0.018485036,0.434872694,
    23202,0.018669299,0.453541993,
    23208,0.018674127,0.47221612,
    23036,0.018535729,0.490751849,
    23344,0.018783559,0.509535408,
    23210,0.018675737,0.528211144,
    23086,0.018575961,0.546787105,
    23255,0.018711945,0.565499051,
    22762,0.018315257,0.583814308,
    22839,0.018377214,0.602191522,
    22957,0.018472162,0.620663685,
    22643,0.018219505,0.638883189,
    22335,0.017971675,0.656854864,
    22269,0.017918569,0.674773433,
    21930,0.017645795,0.692419228,
    21528,0.017322329,0.709741557,
    21319,0.017154159,0.726895716,
    20873,0.016795289,0.743691005,
    20390,0.016406647,0.760097651,
    19970,0.016068697,0.776166348,
    19570,0.01574684,0.791913189,
    18891,0.015200489,0.807113677,
    18146,0.01460103,0.821714708,
    17525,0.014101348,0.835816056,
    16912,0.013608102,0.849424158,
    16564,0.013328087,0.862752245,
    15736,0.012661844,0.875414089,
    15177,0.012212049,0.887626138,
    14293,0.011500746,0.899126883,
    13578,0.010925427,0.91005231,
    12982,0.01044586,0.92049817,
    11914,0.009586503,0.930084672,
    11167,0.008985435,0.939070108,
    10282,0.008273327,0.947343435,
    9846,0.007922503,0.955265938,
    8728,0.007022914,0.962288852,
    8058,0.006483804,0.968772656,
    7286,0.00586262,0.974635276,
    6458,0.005196377,0.979831653,
    5799,0.004666118,0.984497771,
    5086,0.004092408,0.988590179,
    4503,0.003623302,0.992213481,
    3778,0.003039937,0.995253418,
    3225,0.00259497,0.997848388,
    2674,0.002151612,1
]


def cdf_v2(x,mu,sig):
    prob_index=math.floor(((x-mu)/sig)*20+0.5)+40
    if prob_index<0:
        return 0
    elif prob_index>80:
        return 1
    return prob_list[prob_index*3+2]

#calculate the probability of being the maximum according to input_list
def cal_prob_v2(input_list):
    prob=[0,0,0,0,0,0]
    for i in range(6):
        for t in range(81):
            def cal_cdf_all(): #cdf_all represents the probability that i is the smallest rdcost
                cdf_all=1
                for other in range(6):
                    if other==i:
                        continue
                    else:
                        cdf_all*=(1-cdf_v2(input_list[i*2]+input_list[i*2+1]*(t-40)*0.05, input_list[other*2], input_list[other*2+1]))
                        if cdf_all==0:
                            break
                return cdf_all

            prob[i]+= cal_cdf_all()*prob_list[t*3+1]
    
    sum_prob=sum(prob)
    prob=[new_prob/sum_prob for new_prob in prob]
    return prob
    